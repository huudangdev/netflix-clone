{"version":3,"sources":["assets/svg/logo.svg","components/Header.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","HeaderComponent","className","Logo","src","logo","alt","react_router_dom","Title","Subtitle","react_icons_kit","icon","ic_navigate_next","size","styled","img","_templateObject","div","_templateObject2","h1","_templateObject3","h2","_templateObject4","Home","components_Header","App","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,o4ECQxC,IAqBeC,EArBA,WACX,OACIC,EAAAC,EAAAC,cAACC,EAAD,CAAiBC,UAAU,oBACvBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACXJ,EAAAC,EAAAC,cAACG,EAAD,CAAMC,IAAKC,IAAMC,IAAI,SACrBR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAASL,UAAU,cAAnB,YAIJJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACXJ,EAAAC,EAAAC,cAACQ,EAAD,wBACAV,EAAAC,EAAAC,cAACS,EAAD,wCACAX,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAML,UAAU,kBAAhB,aAEIJ,EAAAC,EAAAC,cAACU,EAAA,KAAD,CAAMR,UAAU,OAAOS,KAAMC,mBAAkBC,KAAM,SAUnEV,EAAOW,IAAOC,IAAVC,KAUJf,EAAkBa,IAAOG,IAAVC,KAkEfV,EAAQM,IAAOK,GAAVC,KAQLX,EAAWK,IAAOO,GAAVC,KCxGCC,EARF,WACT,OACIzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwB,EAAD,QCSGC,MAVf,WACE,OACA3B,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,OCEnBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1b641632.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.35f3a5ae.svg\";","import React from 'react';\nimport {NavLink, Link} from 'react-router-dom'\nimport styled from 'styled-components'\nimport {Icon} from 'react-icons-kit'\n\nimport {ic_navigate_next} from 'react-icons-kit/md/ic_navigate_next'\nimport logo from '../assets/svg/logo.svg'\n\nconst Header = () => {\n    return (\n        <HeaderComponent className='header-container'>\n            <div className='header-top'>\n                <Logo src={logo} alt='logo'/>\n                <NavLink className='signIn-btn'>\n                    Sign In\n                </NavLink>\n            </div>\n            <div className='header-content'>\n                <Title>See what's next</Title>\n                <Subtitle>WATCH ANYWHERE. CANCEL ANYTIME.</Subtitle>\n                <Link className='main-offer-btn'>\n                    try it now\n                    <Icon className='Icon' icon={ic_navigate_next} size={37}/>\n                </Link>\n            </div>\n        </HeaderComponent>\n    )\n}\n\nexport default Header\n\n//logo style\nconst Logo = styled.img`\n    width: 10rem;\n    height: 3.5rem;\n    position: absolute;\n    top: 25%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n\n//Container\nconst HeaderComponent = styled.div`\n    .signIn-btn {\n        right: 0;\n        margin: 1.125rem 3% 0;\n        padding: 0.4375rem 1.0625rem;\n        font-weight:400;\n        line-height: normal;\n        border-radius: 0.1875rem;\n        font-size: 1rem;\n        background: var(--main-red);\n        position: absolute;\n        translate: transform(-50%, -50%);\n        cursor: pointer;\n        transition: background 0.2s ease-in;\n        &:hover {\n            background: var(--main-red-hover);\n        }\n    }\n\n    //Header Top\n    .header-top {\n        position: relative;\n        height: 10rem;\n        z-index: 1;\n    }\n\n    //Header Content\n    .header-content {\n        width: 65%;\n        position: relative;\n        margin: 4.5rem auto 0;\n        display: flex;\n        justify-content: center;\n        align-content: center;\n        text-align: center;\n        flex-direction: column;\n        z-index: 1;\n    }\n\n    // Main btn\n    .main-offer-btn {\n        display: inline-block;\n        background: var(--main-red);\n        text-transform: uppercase;\n        border: none;\n        outline: none;\n        margin: 0 33%;\n        padding: 1.5rem;\n        border-radius: 0.1875rem;\n        font-size: 2rem;\n        text-align: center;\n        box-shadow: 0 1px 0 rgba(0,0,0,0.45);\n        transition: background 0.2s ease-in;\n        cursor: pointer;\n        &:hover {\n            background: var(--main-red-hover);\n        }\n    }\n\n    .Icon svg {\n        vertical-align:bottom;\n        margin-left: 1.5rem;\n    }\n`;\n\n// Main title\nconst Title = styled.h1`\n    margin : 0 0 1.2rem;\n    font-size: 5rem;\n    font-weight: 700;\n    line-height: 1.1em;\n`;\n\n// Subtitle\nconst Subtitle = styled.h2`\n    font-weight: 400;\n    font-size: 1.875rem;\n    line-height: 1.25em;\n    margin: 0 0 1.875rem;\n    text-transform: uppercase;\n`;","import React from 'react';\n\nimport Header from '../components/Header'\n\nconst Home = () => {\n    return (\n        <div>\n            <Header/>\n        </div>\n    )\n}\n\nexport default Home","import React from 'react';\nimport './css/App.css';\nimport {BrowserRouter as Router ,Switch, Route} from 'react-router-dom'\n\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n  <Router>\n    <Switch>\n      <Route path='/' exact component={Home}/>\n    </Switch>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}